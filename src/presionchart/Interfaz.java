/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package presionchart;

import BaseDeDatos.GestorBD;
import BaseDeDatos.ServiciosBD;
import com.itextpdf.text.BaseColor;
import com.itextpdf.text.Document;
import com.itextpdf.text.Element;
import com.itextpdf.text.Image;
import com.itextpdf.text.PageSize;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.Phrase;
import com.itextpdf.text.Rectangle;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;
import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.image.BufferedImage;
import java.io.File;

import java.io.FileOutputStream;
import java.sql.ResultSet;
import java.text.DecimalFormat;
import java.util.Date;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.BoxLayout;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JInternalFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTable;
import javax.swing.SwingConstants;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;
import javax.swing.table.TableCellRenderer;

import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.renderer.category.LineAndShapeRenderer;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.util.ShapeUtilities;

/**
 *
 * @author JoseCarlos
 */
public final class Interfaz extends javax.swing.JFrame {

    public static int idPersona = 0;
    public static int edad = 0;
    public static String nombre = "Desconocido";
    public static String rutaDB;
    private GestorBD baseDeDatos;
    private Date dia;
    private static DecimalFormat deci = new DecimalFormat("0");

    /**
     * Creates new form Interfaz
     */
    public Interfaz() {
        initComponents();

        //baseDeDatos.ruta = "";
        // baseDeDatos.conectar();
        tBoxFecha.setEnabled(false);
        tBoxFecha.getCalendarButton().setEnabled(true);
        dia = new Date();
        tBoxFecha.setDate(dia);
        toogleGui(false);
        this.setLocationRelativeTo(null);
        // seleccionarUsuario();
        //llenarTabla(50);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        buttonGroup1 = new javax.swing.ButtonGroup();
        jMenuItem2 = new javax.swing.JMenuItem();
        jPanel4 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        tBoxPresion = new javax.swing.JTextField();
        tBoxFecha = new com.toedter.calendar.JDateChooser();
        botonGuardar = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        comboTomas = new javax.swing.JComboBox();
        botonActualizarGrafico = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        lblPaciente = new javax.swing.JLabel();
        jButPDF = new javax.swing.JButton();
        jTabbedPane2 = new javax.swing.JTabbedPane();
        escritorio = new javax.swing.JDesktopPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablaMediciones = new javax.swing.JTable();
        jLabel7 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuAbrirBD = new javax.swing.JMenuItem();
        jMenuNuevaBD = new javax.swing.JMenuItem();
        jMenuEditar = new javax.swing.JMenuItem();
        jMenuBorrar = new javax.swing.JMenuItem();
        menuSalir = new javax.swing.JMenuItem();
        menuCambioUsuario = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        menuNuevoUser = new javax.swing.JMenuItem();
        menuEditUser = new javax.swing.JMenuItem();
        menuEliminarUsuario = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        menuAyuda = new javax.swing.JMenuItem();
        menuAcerca = new javax.swing.JMenuItem();

        jMenuItem2.setText("jMenuItem2");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("SimPresAR1.0.2013");
        setBackground(new java.awt.Color(153, 255, 153));
        setFont(new java.awt.Font("Segoe UI Semibold", 0, 12)); // NOI18N
        setResizable(false);
        getContentPane().setLayout(new java.awt.GridBagLayout());

        jPanel4.setInheritsPopupMenu(true);
        jPanel4.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Ingresar Nueva Toma", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI Semibold", 0, 11))); // NOI18N
        jPanel2.setLayout(null);

        tBoxPresion.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                tBoxPresionKeyTyped(evt);
            }
        });
        jPanel2.add(tBoxPresion);
        tBoxPresion.setBounds(10, 40, 150, 30);
        jPanel2.add(tBoxFecha);
        tBoxFecha.setBounds(10, 90, 150, 30);

        botonGuardar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/guaradr2.png"))); // NOI18N
        botonGuardar.setText("Guardar");
        botonGuardar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        botonGuardar.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        botonGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonGuardarActionPerformed(evt);
            }
        });
        jPanel2.add(botonGuardar);
        botonGuardar.setBounds(180, 40, 80, 70);

        jLabel1.setFont(new java.awt.Font("Segoe UI Semibold", 0, 11)); // NOI18N
        jLabel1.setText("Fecha");
        jLabel1.setToolTipText("");
        jPanel2.add(jLabel1);
        jLabel1.setBounds(10, 70, 150, 15);

        jLabel2.setFont(new java.awt.Font("Segoe UI Semibold", 0, 11)); // NOI18N
        jLabel2.setText("Toma:Sistolico/Diastolico");
        jLabel2.setToolTipText("");
        jPanel2.add(jLabel2);
        jLabel2.setBounds(10, 20, 150, 15);

        jPanel4.add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 10, 280, 150));

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Cambiar cantidad de Datos de Grafico y Tabla", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI Semibold", 0, 11))); // NOI18N
        jPanel3.setLayout(null);

        comboTomas.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "5", "10", "15", "20", "30", "40", "50", "100" }));
        jPanel3.add(comboTomas);
        comboTomas.setBounds(10, 50, 120, 30);

        botonActualizarGrafico.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/actualizar.png"))); // NOI18N
        botonActualizarGrafico.setText("Actualizar");
        botonActualizarGrafico.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        botonActualizarGrafico.setIconTextGap(3);
        botonActualizarGrafico.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        botonActualizarGrafico.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonActualizarGraficoActionPerformed(evt);
            }
        });
        jPanel3.add(botonActualizarGrafico);
        botonActualizarGrafico.setBounds(140, 30, 120, 70);

        jLabel3.setFont(new java.awt.Font("Segoe UI Semibold", 0, 11)); // NOI18N
        jLabel3.setText("Cantidad de Tomas");
        jLabel3.setToolTipText("");
        jPanel3.add(jLabel3);
        jLabel3.setBounds(10, 30, 120, 15);

        jPanel4.add(jPanel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(560, 20, 280, 120));

        lblPaciente.setFont(new java.awt.Font("Segoe UI Semibold", 0, 13)); // NOI18N
        lblPaciente.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Paciente", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI Semibold", 0, 11))); // NOI18N
        jPanel4.add(lblPaciente, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 20, 240, 60));

        jButPDF.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/pdf.png"))); // NOI18N
        jButPDF.setText("Importar a  PDF");
        jButPDF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButPDFActionPerformed(evt);
            }
        });
        jPanel4.add(jButPDF, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 90, -1, -1));

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 5;
        gridBagConstraints.ipady = 1;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.weighty = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(0, 8, 0, 8);
        getContentPane().add(jPanel4, gridBagConstraints);

        jTabbedPane2.setTabLayoutPolicy(javax.swing.JTabbedPane.SCROLL_TAB_LAYOUT);
        jTabbedPane2.setTabPlacement(javax.swing.JTabbedPane.LEFT);
        jTabbedPane2.setToolTipText("");
        jTabbedPane2.addTab("Grafica", escritorio);

        tablaMediciones.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Persona", "Fecha", "Sistolica", "Diastolica", "Estado"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tablaMediciones.setCellSelectionEnabled(true);
        tablaMediciones.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jScrollPane1.setViewportView(tablaMediciones);

        jTabbedPane2.addTab("Tabla", jScrollPane1);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridheight = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.7;
        gridBagConstraints.weighty = 0.4;
        gridBagConstraints.insets = new java.awt.Insets(9, 0, 9, 0);
        getContentPane().add(jTabbedPane2, gridBagConstraints);

        jLabel7.setFont(new java.awt.Font("Segoe UI Semibold", 0, 24)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(0, 102, 0));
        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel7.setText("Sistema de Monitoreo de Presion Arterial");
        jLabel7.setAutoscrolls(true);
        jLabel7.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jLabel7.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        getContentPane().add(jLabel7, gridBagConstraints);

        jMenu1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/basededatos.png"))); // NOI18N
        jMenu1.setText("Opciones");

        jMenuAbrirBD.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/abrirdb.png"))); // NOI18N
        jMenuAbrirBD.setText("Abrir Conjunto de Datos");
        jMenuAbrirBD.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuAbrirBDActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuAbrirBD);

        jMenuNuevaBD.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/crearbd.png"))); // NOI18N
        jMenuNuevaBD.setText("Nuevo Conjunto de Datos");
        jMenuNuevaBD.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuNuevaBDActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuNuevaBD);

        jMenuEditar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/database_edit.png"))); // NOI18N
        jMenuEditar.setText("Editar/Eliminar Datos");
        jMenuEditar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuEditarActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuEditar);

        jMenuBorrar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/borrarBD.png"))); // NOI18N
        jMenuBorrar.setText("Borrar Todos los Datos");
        jMenuBorrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuBorrarActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuBorrar);

        menuSalir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/cerrar.png"))); // NOI18N
        menuSalir.setText("Salir");
        menuSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuSalirActionPerformed(evt);
            }
        });
        jMenu1.add(menuSalir);

        jMenuBar1.add(jMenu1);

        menuCambioUsuario.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/menu.jpg"))); // NOI18N
        menuCambioUsuario.setText("Usuarios");

        jMenuItem1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/comunidad.png"))); // NOI18N
        jMenuItem1.setText("Cambiar Usuario");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        menuCambioUsuario.add(jMenuItem1);

        menuNuevoUser.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/nuUser.png"))); // NOI18N
        menuNuevoUser.setText("Nuevo Usuario");
        menuNuevoUser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuNuevoUserActionPerformed(evt);
            }
        });
        menuCambioUsuario.add(menuNuevoUser);

        menuEditUser.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/editusert.png"))); // NOI18N
        menuEditUser.setText("Editar Datos Usuario");
        menuEditUser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuEditUserActionPerformed(evt);
            }
        });
        menuCambioUsuario.add(menuEditUser);

        menuEliminarUsuario.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/eliminaruser.png"))); // NOI18N
        menuEliminarUsuario.setText("Eliminar Usuario");
        menuEliminarUsuario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuEliminarUsuarioActionPerformed(evt);
            }
        });
        menuCambioUsuario.add(menuEliminarUsuario);

        jMenuBar1.add(menuCambioUsuario);

        jMenu2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/AYUDA.jpg"))); // NOI18N
        jMenu2.setText("Ayuda");
        jMenu2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenu2ActionPerformed(evt);
            }
        });

        menuAyuda.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/help.jpg"))); // NOI18N
        menuAyuda.setText("Ayuda");
        menuAyuda.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuAyudaActionPerformed(evt);
            }
        });
        jMenu2.add(menuAyuda);

        menuAcerca.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/dilbert.png"))); // NOI18N
        menuAcerca.setText("Acerca de...");
        menuAcerca.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuAcercaActionPerformed(evt);
            }
        });
        jMenu2.add(menuAcerca);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void menuAcercaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuAcercaActionPerformed
        // TODO add your handling code here:
        JOptionPane.showMessageDialog(rootPane, "SiMPresAr 1.0.2013\n\nSistema Para el Monitoreo de la Presión Arterial.\nDesarrollado por Jose Carlos Rangel Ortiz.\n@jockrlos22\nVeraguas, Panamá\nDiciembre 2013\n", "Acerca de SiMPresAr...", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_menuAcercaActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        // Cambiar de usuario en el menu
        seleccionarUsuario();
        llenarTabla(50);
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void menuSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuSalirActionPerformed
        // TODO add your handling code here:
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        System.exit(0);
    }//GEN-LAST:event_menuSalirActionPerformed

    private void menuNuevoUserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuNuevoUserActionPerformed
        // TODO add your handling code here:
        NuevoUsuario g = new NuevoUsuario(this, rootPaneCheckingEnabled);
        g.setVisible(true);
        llenarTabla(50);
    }//GEN-LAST:event_menuNuevoUserActionPerformed

    private void jMenu2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenu2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jMenu2ActionPerformed

    private void menuAyudaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuAyudaActionPerformed
        Ayuda g = new Ayuda(this, rootPaneCheckingEnabled);
        g.setVisible(true);
    }//GEN-LAST:event_menuAyudaActionPerformed

    private void jButPDFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButPDFActionPerformed
        //Generacion de pdf
        crearPdf();
    }//GEN-LAST:event_jButPDFActionPerformed

    private void botonActualizarGraficoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonActualizarGraficoActionPerformed
        // TODO add your handling code here:
        llenarTabla(Integer.parseInt(comboTomas.getSelectedItem().toString()));
    }//GEN-LAST:event_botonActualizarGraficoActionPerformed

    private void botonGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonGuardarActionPerformed
        // TODO add your handling code here:
        float sis, dias;
        String fecha;
        // int estado;
        Medicion med;
        String presion[];

        if (!tBoxPresion.getText().equals("") && tBoxFecha.getDate() != null) {

            Pattern pat = Pattern.compile("\\d{2,3}/\\d{2,3}");
            Matcher mat = pat.matcher(tBoxPresion.getText().trim());
            if (mat.matches()) {

                presion = tBoxPresion.getText().split("/");

                sis = Float.parseFloat(presion[0]);
                dias = Float.parseFloat(presion[1]);
                fecha = FechasParser.parseString(tBoxFecha.getDate());
                //estado = determinarEstado(sis, dias);
                med = new Medicion(idPersona, fecha, sis, dias);


                if (baseDeDatos.insertar(med)) {
                    JOptionPane.showMessageDialog(rootPane, "Insercion Exitosa");
                    llenarTabla(50);
                    //*+++++++++++++++++++++++++++++++++++++++++++++++++
                    //estado = med.getEstado();
                    String msg = "";

                    switch (med.getEstado()) {
                        case 0:
                            msg = "<html>Presión Baja.<BR>Consulte con su Médico.</html>";
                            break;
                        case 1:
                            msg = "Presión Arterial óptima.";
                            break;
                        case 2:
                            msg = "Presión Arterial óptima.";
                            break;
                        case 3:
                            msg = "Consulte con su Médico.";
                            break;
                        case 4:
                            msg = "Se recomienda acudir a su Médico.";
                            break;
                        case 5:
                            msg = "Se recomienda acudir a su Médico.";
                            break;
                        case 6:
                            msg = "<html>¡URGENTE!!!<BR>Acuda a su Médico.</html>";
                            break;
                        default:
                            throw new AssertionError();
                    }

                    JLabel consejo = new JLabel(msg);
                    JLabel titulo = new JLabel("El estado de su Presión Arterial es:");
                    JPanel panel = new JPanel();
                    panel.add(titulo);
                    panel.add(clasificaEstado(med.getEstado()));
                    panel.add(consejo);
                    panel.setLayout(new BoxLayout(panel, BoxLayout.Y_AXIS));

                    JOptionPane.showMessageDialog(rootPane, panel, "Estado de Presión Arterial", JOptionPane.INFORMATION_MESSAGE);
                    //+++++++++++++++++++++++++++

                } else {
                    JOptionPane.showMessageDialog(rootPane, "No Se pudo Insertar.");
                }
            } else {
                JOptionPane.showMessageDialog(rootPane, "Formato de Datos Incorrecto.\nEl formato correcto es: Sistolico/Diastolico.\n ### / ###.\n [0-200] / [0-200].");
            }

        } else {
            JOptionPane.showMessageDialog(rootPane, "Debe Completar todos los campos.");
        }

    }//GEN-LAST:event_botonGuardarActionPerformed

    private void tBoxPresionKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tBoxPresionKeyTyped
        char c = evt.getKeyChar();
        if (Character.isLetter(c) || Character.isWhitespace(c)) {
            getToolkit().beep();
            evt.consume();
        }
    }//GEN-LAST:event_tBoxPresionKeyTyped

    private void jMenuAbrirBDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuAbrirBDActionPerformed
        // TODO add your handling code here:
        JFileChooser fc = new JFileChooser();
        try {
            FileNameExtensionFilter filtroImagen = new FileNameExtensionFilter("Base de Datos SQLite: db & s3db", "db", "s3db");
            fc.setFileFilter(filtroImagen);
            int returnVal = fc.showOpenDialog(Interfaz.this);

            if (returnVal == JFileChooser.APPROVE_OPTION) {
                rutaDB = fc.getSelectedFile().getPath().toString();
                //System.out.print(file);

                baseDeDatos = new GestorBD(rutaDB);
                baseDeDatos.conectar();

                seleccionarUsuario();
                llenarTabla(50);
                toogleGui(true);

                //JOptionPane.showMessageDialog(rootPane, file);
            } else {
                JOptionPane.showMessageDialog(rootPane, "Acción cancelada por el Usuario.");
            }
            //log.setCaretPosition(log.getDocument().getLength());

        } catch (Exception ik) {
            JOptionPane.showMessageDialog(rootPane, ik.toString() + "\nSe produjo un error al cargar los datos.");

        }
    }//GEN-LAST:event_jMenuAbrirBDActionPerformed

    private void jMenuNuevaBDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuNuevaBDActionPerformed
        // crear archivo para registros
        JFileChooser fc = new JFileChooser();
        fc.setSelectedFile(new File("DatosPresion.db"));
        int returnVal = fc.showSaveDialog(Interfaz.this);
        String ruta;

        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = fc.getSelectedFile();
            ruta = file.getPath();

            ServiciosBD server = new ServiciosBD();
            try {
                if (server.crearBD(ruta)) {
                    JOptionPane.showMessageDialog(null, "Se creo el archivo correctamente.");
                    rutaDB = ruta;
                    baseDeDatos = new GestorBD(rutaDB);
                    baseDeDatos.conectar();

                    seleccionarUsuario();
                    llenarTabla(50);
                    toogleGui(true);

                } else {
                    JOptionPane.showMessageDialog(null, "Surgieron problemas al crear el archivo.");
                }
            } catch (Exception e) {
            }

        } else {
            JOptionPane.showMessageDialog(null, "Acción Cancelada por el usuario.");
        }

    }//GEN-LAST:event_jMenuNuevaBDActionPerformed

    private void jMenuBorrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuBorrarActionPerformed
        // TODO add your handling code here:
        if (0 == JOptionPane.showConfirmDialog(rootPane, "Desea eliminar los todos los datos ?", "SiMPresAr", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE)) {
            ServiciosBD server = new ServiciosBD();

            if (server.borrarBD(rutaDB)) {
                JOptionPane.showMessageDialog(null, "Datos Eliminados exitosamente.");
                seleccionarUsuario();
                llenarTabla(50);

            } else {
                JOptionPane.showMessageDialog(null, "Se produjo un error al elimnar los datos.");
            }
        } else {
            JOptionPane.showMessageDialog(null, "Acción Cancelada por el usuario.");
        }

    }//GEN-LAST:event_jMenuBorrarActionPerformed

    private void jMenuEditarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuEditarActionPerformed
        // TODO add your handling code here:
        EdicionMedicones h = new EdicionMedicones(this, rootPaneCheckingEnabled);
        h.setVisible(true);
        llenarTabla(50);
    }//GEN-LAST:event_jMenuEditarActionPerformed

    private void menuEditUserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuEditUserActionPerformed
        EditarUsuario h = new EditarUsuario(this, rootPaneCheckingEnabled);
        h.setVisible(true);
        lblPaciente.setText(nombre);
        llenarTabla(50);
    }//GEN-LAST:event_menuEditUserActionPerformed

    private void menuEliminarUsuarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuEliminarUsuarioActionPerformed
        GestorBD bd = new GestorBD(rutaDB);
        bd.conectar();
        if (0 == JOptionPane.showConfirmDialog(rootPane, "Desea eliminar este Usuario y todos sus datos?", "SiMPresAr", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE)) {

            if (baseDeDatos.eliminarPersona(idPersona)) {
//                if (bd.eliminarMedicionPersona(idPersona)) {
//                    JOptionPane.showMessageDialog(rootPane, "Eliminación Exitosa");
//                }
                lblPaciente.setText("");
                idPersona = 0;
                seleccionarUsuario();
                llenarTabla(50);
            } else {
                JOptionPane.showMessageDialog(rootPane, "No Se pudo Elimnar.");
            }
        }
    }//GEN-LAST:event_menuEliminarUsuarioActionPerformed

    private void seleccionarUsuario() {
        SeleccionPaciente h = new SeleccionPaciente(this, rootPaneCheckingEnabled);
        h.setVisible(true);
        lblPaciente.setText(nombre);
    }

    private void llenarTabla(int limite) {
        String titulos[] = new String[5];
        DefaultTableModel modelo = new DefaultTableModel();
        titulos[0] = "<html><b>#</b></html>";
        titulos[1] = "<html><b>Persona</b></html>";
        titulos[2] = "<html><b>Fecha</b></html>";
        titulos[3] = "<html><b>Presión</b></html>";
        titulos[4] = "<html><b>Estado</b></html>";

        int filas = 0;
        Medicion resultado[];

        try {
            ResultSet datos1 = baseDeDatos.getDatosMedicion(idPersona, limite);

            while (datos1.next()) {
                filas++;
            }

            resultado = new Medicion[filas];
            ResultSet datos2 = baseDeDatos.getDatosMedicion(idPersona, limite);

            int i = filas - 1;
            double arrSisto[] = new double[filas];
            double arrDiasto[] = new double[filas];
            String arrFechas[] = new String[filas];
            while (datos2.next()) {

                resultado[i] = new Medicion(
                        datos2.getInt("idPersona"),
                        datos2.getObject("Fecha").toString(),
                        datos2.getFloat("Sistolico"),
                        datos2.getFloat("Diastolico"));
                //,datos2.getInt("Estado"));                                    //Se llama al segundo constructor           
                arrSisto[i] = datos2.getFloat("Sistolico");
                arrDiasto[i] = datos2.getFloat("Diastolico");
                arrFechas[i] = FechasParser.parseString2(datos2.getObject("Fecha").toString());
                i--;
            }

            Object modeloTabla[][] = new Object[filas][5];
            tablaMediciones.setDefaultRenderer(Object.class, new Renderer());

            for (int f = filas - 1, fi = 0; f >= 0; fi++, f--) {  // Si kiero ke la ultima medicion este al principio entonces hago (int f = filas-1; f >= 0; f--)    (int f = 0; f < filas; f++)
                modeloTabla[f][0] = String.valueOf(f + 1);
                modeloTabla[f][1] = nombre;
                modeloTabla[f][2] = FechasParser.parseString2(resultado[fi].getFecha());
                modeloTabla[f][3] = deci.format(resultado[fi].getSistolico()) + "/" + deci.format(resultado[fi].getDiastolico());
                modeloTabla[f][4] = clasificaEstado(resultado[fi].getEstado());
            }

            modelo.setDataVector(modeloTabla, titulos);

            tablaMediciones.setModel(modelo);
            tablaMediciones.setVisible(true);


            TableCellRenderer render = new TableCellRenderer() {
                @Override
                public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected,
                        boolean hasFocus, int row, int column) {
                    JLabel lbl = new JLabel(value == null ? "" : value.toString());
                    lbl.setHorizontalAlignment(SwingConstants.CENTER); //alinea 
                    lbl.setOpaque(true);
                    return lbl;
                }
            };

            JTableHeader jtableHeader = tablaMediciones.getTableHeader();
            DefaultTableCellRenderer rend = (DefaultTableCellRenderer) tablaMediciones.getTableHeader().getDefaultRenderer();
            rend.setHorizontalAlignment(JLabel.CENTER);
            jtableHeader.setDefaultRenderer(rend);

            int[] anchos = {20, 200, 55, 60, 100};
            //hacemos un bucle FOR desde cero hasta la cantidad de columnas
            //de nuestra tabla
            for (int il = 0; il < tablaMediciones.getColumnCount(); il++) {
                //Sacamos el modelo de columnas de nuestra tabla
                //luego obtenemos la columna en la posicion "i"
                //invocamos el metodo setPreferrefWidth para ajustar el ancho
                //y le damos el valor del entero que esta en el arreglo en la posicion "i"
                tablaMediciones.getColumnModel().getColumn(il).setPreferredWidth(anchos[il]);
                //tablaMediciones.getColumnModel().getColumn(il).setHeaderRenderer(rend);
                if (il != tablaMediciones.getColumnCount() - 1) {
                    tablaMediciones.getColumnModel().getColumn(il).setCellRenderer(render);
                }
            }

            graficar(filas, arrSisto, arrDiasto, arrFechas);

        } catch (Exception cv) {
            JOptionPane.showMessageDialog(rootPane, cv.getMessage() + "\nError al Llenar la Tabla");
        }
    }

    public JLabel clasificaEstado(int estado) {
        JLabel h = new JLabel();
        String ruta = "";
        try {

            String cad = "ola ke ase";
            switch (estado) {
                case 0:
                    cad = "Baja";
                    h.setForeground(new Color(255, 106, 0));
                    ruta = "/img/baja.png";
                    break;
                case 1:
                    cad = "Optima"; //Sera Optima con Fuzzy
                    h.setForeground(new Color(8, 129, 62));
                    ruta = "/img/bien.gif";
                    break;
                case 2:
                    cad = "Normal"; //Sera Normal con Fuzzy
                    h.setForeground(new Color(8, 129, 62));// sera color verde con Fuzzy
                    ruta = "/img/bien.gif"; //  ruta = "/img/bien.gif"; // con fuzzy
                    break;
                case 3:
                    cad = "Ligeramente Alta";  //Sera Ligeramente Alta con Fuzzy
                    h.setForeground(new Color(185, 163, 39)); // sera new Color(185, 163, 39) con Fuzzy 
                    ruta = "/img/alta1.png";  //   ruta = "/img/alta1.png"; // con zuzzy
                    break;
                case 4:
                    cad = "Demasiado Alta";
                    h.setForeground(new Color(185, 163, 39));
                    ruta = "/img/alta1.png";
                    break;
                case 5:
                    cad = "Muy Alta";
                    h.setForeground(Color.RED);
                    ruta = "/img/alta.png";
                    break;
                case 6:
                    cad = "Peligrosamente Alta";
                    h.setForeground(Color.RED);
                    ruta = "/img/alta.png";
                    break;

            }
            h.setText(cad);
            h.setIcon(new ImageIcon(getClass().getResource(ruta)));
        } catch (Exception cv) {
            JOptionPane.showMessageDialog(rootPane, cv.toString() + "\nError en la clasificacion de estado.");
        } finally {
            return h;
        }

    }

    public void crearPdf() {
        int filas;

        DefaultTableModel model = (DefaultTableModel) tablaMediciones.getModel();

        filas = tablaMediciones.getRowCount();

        try {
            double arrSisto[] = new double[filas];
            double arrDiasto[] = new double[filas];
            String arrFechas[] = new String[filas];
            String presion[];
            for (int i = filas - 1, fi = 0; i >= 0; fi++, i--) {
                presion = model.getValueAt(fi, 3).toString().split("/");
                arrSisto[i] = Double.parseDouble(presion[0]);
                arrDiasto[i] = Double.parseDouble(presion[1]);
                arrFechas[i] = model.getValueAt(fi, 2).toString();
            }

            DefaultCategoryDataset dataset = new DefaultCategoryDataset();

            for (int io = 0; io < filas; io++) {

                dataset.addValue(arrSisto[io], "Sistolico", arrFechas[io]);
                dataset.addValue(arrDiasto[io], "Diastolico", arrFechas[io]);

                dataset.addValue(85, "Limite Diastolico Normal", arrFechas[io]);
                dataset.addValue(130, "Limite Sistolico Normal", arrFechas[io]);
            }

            JFreeChart grafico = ChartFactory.createLineChart(
                    "Presión Arterial de " + nombre, //Titulo
                    "Fechas", //Xlabel Categorias
                    "Medición", //YLabel Valores
                    dataset, //dataset
                    PlotOrientation.VERTICAL, //orientacion
                    true, //generar Leyenda 
                    true, //Generar Tooltps
                    true); //generar URLS

            CategoryPlot ejes = new CategoryPlot();
            ejes = grafico.getCategoryPlot();

            ejes.setBackgroundPaint(Color.white);
            ejes.setRangeGridlinePaint(Color.BLACK);

            NumberAxis numberaxis = (NumberAxis) ejes.getRangeAxis();
            numberaxis.setStandardTickUnits(NumberAxis.createIntegerTickUnits());

            LineAndShapeRenderer lineandshaperenderer = (LineAndShapeRenderer) ejes.getRenderer();
            lineandshaperenderer.setSeriesShapesVisible(0, true);
            lineandshaperenderer.setSeriesShapesVisible(1, true);
            lineandshaperenderer.setSeriesLinesVisible(0, true);
            lineandshaperenderer.setSeriesLinesVisible(1, true);
            lineandshaperenderer.setSeriesShape(0, ShapeUtilities.createRegularCross(3F, 3F));
            lineandshaperenderer.setSeriesShape(1, ShapeUtilities.createDiagonalCross(3F, 3F));
            lineandshaperenderer.setDrawOutlines(true);
            lineandshaperenderer.setUseFillPaint(true);
            lineandshaperenderer.setSeriesFillPaint(0, Color.white);
            lineandshaperenderer.setSeriesFillPaint(1, Color.ORANGE);
            lineandshaperenderer.setSeriesPaint(0, Color.BLUE);
            lineandshaperenderer.setSeriesPaint(1, Color.GRAY);
            lineandshaperenderer.setSeriesPaint(2, Color.GREEN);
            lineandshaperenderer.setSeriesPaint(3, Color.RED);

            lineandshaperenderer.setItemMargin(0.2);
            lineandshaperenderer.setItemLabelAnchorOffset(12);

            ChartPanel ojiv = new ChartPanel(grafico);
            ojiv.setPreferredSize(new Dimension(escritorio.getWidth() - 10, escritorio.getHeight() - 30));

            JFileChooser fc = new JFileChooser();
            if (0 == JOptionPane.showConfirmDialog(rootPane, "Desea Generar el Grafico en formato PDF?", "SiMPresAr", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE)) {

                try {
                    fc.setSelectedFile(new File("Presión Arterial " + nombre + ".pdf"));
                    int returnVal = fc.showSaveDialog(Interfaz.this);

                    if (returnVal == JFileChooser.APPROVE_OPTION) {
                        File file = fc.getSelectedFile();
                        String ruta = file.getPath();

                        Rectangle a4 = PageSize.A4;
                        Rectangle a4Landscape = a4.rotate();

                        Document doc = new Document(a4Landscape);
                        PdfWriter.getInstance((com.itextpdf.text.Document) doc, new FileOutputStream(ruta));
                        doc.open();

                        BufferedImage bufferedImage = grafico.createBufferedImage(800, 450);
                        Image image = Image.getInstance(bufferedImage, null);
                        doc.add(image);
                        doc.addTitle("Grafico de Presión Arterial " + nombre);

                        doc.add(new Paragraph("Grafico Generado: " + FechasParser.fecha_calendario(new Date()) + "                        Edad : " + String.valueOf(edad) + " años."));
                        doc.add(new Paragraph("Fecha Inicial: " + arrFechas[0]));
                        doc.add(new Paragraph("Fecha Final: " + arrFechas[filas - 1]));

                        doc.newPage();

                        doc.add(new Paragraph("Historial de Presión Arterial de " + nombre + "\n"));
                        doc.add(new Paragraph("Grafico Generado: " + FechasParser.fecha_calendario(new Date())));
                        doc.add(new Paragraph("                                                 "));
                        doc.add(new Paragraph("                                                 "));
                        doc.add(tablaPDF(filas, model));

                        doc.close();
                        JOptionPane.showMessageDialog(rootPane, "Informe Generado.\nGuardado en :\n" + ruta);
                    } else {
                        JOptionPane.showMessageDialog(rootPane, "Confeccion de Informe Cancelada\npor el Usuario.");
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        } catch (Exception cv) {
            JOptionPane.showMessageDialog(rootPane, cv.getMessage() + "\nError al Generar PDF.");
        }
    }

    private void graficar(int cantidad, double[] sisto, double[] diasto, String[] fecha) {

        DefaultCategoryDataset dataset = new DefaultCategoryDataset();

        for (int i = 0; i < cantidad; i++) {

            dataset.addValue(sisto[i], "Sistolico", fecha[i]);
            dataset.addValue(diasto[i], "Diastolico", fecha[i]);

            dataset.addValue(85, "Limite Diastolico Normal", fecha[i]);
            dataset.addValue(130, "Limite Sistolico Normal", fecha[i]);

        }

        JFreeChart grafico = ChartFactory.createLineChart(
                "Presión Arterial de " + nombre, //Titulo
                "Fechas", //Xlabel Categorias
                "Medición", //YLabel Valores
                dataset, //dataset
                PlotOrientation.VERTICAL, //orientacion
                true, //generar Leyenda 
                true, //Generar Tooltps
                true); //generar URLS

        CategoryPlot ejes = new CategoryPlot();
        ejes = grafico.getCategoryPlot();

        ejes.setBackgroundPaint(Color.white);
        ejes.setRangeGridlinePaint(Color.BLACK);

        NumberAxis numberaxis = (NumberAxis) ejes.getRangeAxis();
        numberaxis.setStandardTickUnits(NumberAxis.createIntegerTickUnits());

        LineAndShapeRenderer lineandshaperenderer = (LineAndShapeRenderer) ejes.getRenderer();
        lineandshaperenderer.setSeriesShapesVisible(0, true);
        lineandshaperenderer.setSeriesShapesVisible(1, true);
        lineandshaperenderer.setSeriesLinesVisible(0, true);
        lineandshaperenderer.setSeriesLinesVisible(1, true);
        lineandshaperenderer.setSeriesShape(0, ShapeUtilities.createRegularCross(3F, 3F));
        lineandshaperenderer.setSeriesShape(1, ShapeUtilities.createDiagonalCross(3F, 3F));
        lineandshaperenderer.setDrawOutlines(true);
        lineandshaperenderer.setUseFillPaint(true);
        lineandshaperenderer.setSeriesFillPaint(0, Color.white);
        lineandshaperenderer.setSeriesFillPaint(1, Color.ORANGE);
        lineandshaperenderer.setSeriesPaint(0, Color.BLUE);
        lineandshaperenderer.setSeriesPaint(1, Color.GRAY);
        lineandshaperenderer.setSeriesPaint(2, Color.GREEN);
        lineandshaperenderer.setSeriesPaint(3, Color.RED);

        lineandshaperenderer.setItemMargin(0.2);
        lineandshaperenderer.setItemLabelAnchorOffset(12);

        ChartPanel ojiv = new ChartPanel(grafico);
        ojiv.setPreferredSize(new Dimension(escritorio.getWidth() - 10, escritorio.getHeight() - 30));

        escritorio.removeAll();
        JInternalFrame ojiframe = new JInternalFrame("Grafico", true);
        ojiframe.getContentPane().add(ojiv);
        escritorio.add(ojiframe);
        ojiframe.pack();
        ojiframe.setVisible(true);

    }

    public static PdfPTable tablaPDF(int cantidad, DefaultTableModel model) {

        float[] colsWidth = {0.3f, 1f, 1f, 1f};
        PdfPTable table = new PdfPTable(colsWidth);

        try {

            table.setWidthPercentage(80);
            PdfPCell cell;

            cell = new PdfPCell(new Phrase("#"));
            cell.setBackgroundColor(BaseColor.LIGHT_GRAY);
            cell.setBorder(Rectangle.NO_BORDER);
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            cell.setVerticalAlignment(Element.ALIGN_CENTER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase("Fecha"));
            cell.setBorder(Rectangle.NO_BORDER);
            cell.setBackgroundColor(BaseColor.LIGHT_GRAY);
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            cell.setVerticalAlignment(Element.ALIGN_CENTER);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase("Presión"));
            cell.setBorder(Rectangle.NO_BORDER);
            cell.setBackgroundColor(BaseColor.LIGHT_GRAY);
            cell.setVerticalAlignment(Element.ALIGN_CENTER);
            cell.setHorizontalAlignment(1);
            table.addCell(cell);

            cell = new PdfPCell(new Phrase("Estado"));
            cell.setBorder(Rectangle.NO_BORDER);
            cell.setBackgroundColor(BaseColor.LIGHT_GRAY);
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            cell.setVerticalAlignment(Element.ALIGN_CENTER);

            table.addCell(cell);

            JLabel label;
            float colores[] = new float[3];

            for (int i = 0; i < cantidad; i++) {
                try {

                    cell = new PdfPCell(new Phrase(String.valueOf(model.getValueAt(i, 0))));
                    cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                    cell.setVerticalAlignment(Element.ALIGN_CENTER);
                    table.addCell(cell);

                    cell = new PdfPCell(new Phrase(String.valueOf(model.getValueAt(i, 2))));
                    cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                    cell.setVerticalAlignment(Element.ALIGN_CENTER);
                    table.addCell(cell);

                    cell = new PdfPCell(new Phrase(String.valueOf(model.getValueAt(i, 3))));
                    cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                    cell.setVerticalAlignment(Element.ALIGN_CENTER);
                    table.addCell(cell);

                    label = (JLabel) model.getValueAt(i, 4);
                    cell = new PdfPCell(new Phrase(label.getText()));
                    cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                    cell.setVerticalAlignment(Element.ALIGN_CENTER);
                    label.getForeground().getRGBColorComponents(colores);
                    cell.setBackgroundColor(new BaseColor(colores[0], colores[1], colores[2]));
                    table.addCell(cell);

                } catch (Exception g) {
                    JOptionPane.showMessageDialog(null, g.toString() + "\nError #1 en la creacio0n de tabla en PDF.");
                }
            }
        } catch (Exception vg) {
            JOptionPane.showMessageDialog(null, vg.toString() + "\nError #2 en la creacio0n de tabla en PDF.");
        }


        return table;
    }

    private void toogleGui(boolean x) {
        jButPDF.setEnabled(x);
        botonActualizarGrafico.setEnabled(x);
        botonGuardar.setEnabled(x);
        menuCambioUsuario.setEnabled(x);
        menuNuevoUser.setEnabled(x);
        jMenuBorrar.setEnabled(x);
        jMenuEditar.setEnabled(x);
        menuEditUser.setEnabled(x);
        menuEliminarUsuario.setEnabled(x);

    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Interfaz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Interfaz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Interfaz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Interfaz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Interfaz().setVisible(true);

            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton botonActualizarGrafico;
    private javax.swing.JButton botonGuardar;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JComboBox comboTomas;
    private javax.swing.JDesktopPane escritorio;
    private javax.swing.JButton jButPDF;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuItem jMenuAbrirBD;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuBorrar;
    private javax.swing.JMenuItem jMenuEditar;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuNuevaBD;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTabbedPane jTabbedPane2;
    private javax.swing.JLabel lblPaciente;
    private javax.swing.JMenuItem menuAcerca;
    private javax.swing.JMenuItem menuAyuda;
    private javax.swing.JMenu menuCambioUsuario;
    private javax.swing.JMenuItem menuEditUser;
    private javax.swing.JMenuItem menuEliminarUsuario;
    private javax.swing.JMenuItem menuNuevoUser;
    private javax.swing.JMenuItem menuSalir;
    private com.toedter.calendar.JDateChooser tBoxFecha;
    private javax.swing.JTextField tBoxPresion;
    private javax.swing.JTable tablaMediciones;
    // End of variables declaration//GEN-END:variables
}
